//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentContextApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameLoopContext {

    public GameLoopEntity turnCounterEntity { get { return GetGroup(GameLoopMatcher.TurnCounter).GetSingleEntity(); } }
    public EldritchHorror.Entitas.Components.TurnCounterComponent turnCounter { get { return turnCounterEntity.turnCounter; } }
    public bool hasTurnCounter { get { return turnCounterEntity != null; } }

    public GameLoopEntity SetTurnCounter(int newTurn) {
        if (hasTurnCounter) {
            throw new Entitas.EntitasException("Could not set TurnCounter!\n" + this + " already has an entity with EldritchHorror.Entitas.Components.TurnCounterComponent!",
                "You should check if the context already has a turnCounterEntity before setting it or use context.ReplaceTurnCounter().");
        }
        var entity = CreateEntity();
        entity.AddTurnCounter(newTurn);
        return entity;
    }

    public void ReplaceTurnCounter(int newTurn) {
        var entity = turnCounterEntity;
        if (entity == null) {
            entity = SetTurnCounter(newTurn);
        } else {
            entity.ReplaceTurnCounter(newTurn);
        }
    }

    public void RemoveTurnCounter() {
        turnCounterEntity.Destroy();
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameLoopEntity {

    public EldritchHorror.Entitas.Components.TurnCounterComponent turnCounter { get { return (EldritchHorror.Entitas.Components.TurnCounterComponent)GetComponent(GameLoopComponentsLookup.TurnCounter); } }
    public bool hasTurnCounter { get { return HasComponent(GameLoopComponentsLookup.TurnCounter); } }

    public void AddTurnCounter(int newTurn) {
        var index = GameLoopComponentsLookup.TurnCounter;
        var component = (EldritchHorror.Entitas.Components.TurnCounterComponent)CreateComponent(index, typeof(EldritchHorror.Entitas.Components.TurnCounterComponent));
        component.Turn = newTurn;
        AddComponent(index, component);
    }

    public void ReplaceTurnCounter(int newTurn) {
        var index = GameLoopComponentsLookup.TurnCounter;
        var component = (EldritchHorror.Entitas.Components.TurnCounterComponent)CreateComponent(index, typeof(EldritchHorror.Entitas.Components.TurnCounterComponent));
        component.Turn = newTurn;
        ReplaceComponent(index, component);
    }

    public void RemoveTurnCounter() {
        RemoveComponent(GameLoopComponentsLookup.TurnCounter);
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameLoopMatcher {

    static Entitas.IMatcher<GameLoopEntity> _matcherTurnCounter;

    public static Entitas.IMatcher<GameLoopEntity> TurnCounter {
        get {
            if (_matcherTurnCounter == null) {
                var matcher = (Entitas.Matcher<GameLoopEntity>)Entitas.Matcher<GameLoopEntity>.AllOf(GameLoopComponentsLookup.TurnCounter);
                matcher.componentNames = GameLoopComponentsLookup.componentNames;
                _matcherTurnCounter = matcher;
            }

            return _matcherTurnCounter;
        }
    }
}
